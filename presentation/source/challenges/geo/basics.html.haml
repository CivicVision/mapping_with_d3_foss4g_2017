---
layout: landingpage
title: Workshop Mapping with D3 - Challenges - D3 Geo - Basics
---
.login-required
%div(id="landingpage")
  %section.sub-heading
    .content-wrapper

      %h1 Basics

      %h2 How to create a simple (ugly) map.
      :markdown
        Remember the `path` SVG element from the introduction? It will be useful here. What did we need to use it again? Right, the `d` attribute.  
        If you want to understand the `d` attribute in more detail take a look at the [Reference](https://www.w3schools.com/graphics/svg_path.asp)
      :code
        # lang: html
        <path d="M150 0 L75 200 L225 200 Z"></path>

      :markdown
        #### Introducing the first helper: geoPath
        The `d3.geoPath()` helper function, given a GeoJSON geometry or feature object, generates an SVG path data string or renders the path to a Canvas.  
        [Reference](https://github.com/d3/d3-geo#paths)

      :code
        # lang: js
        var geojson = { type: 'Point', coordinates: [42.3132882,-71.1972416]};
        console.log(d3.geoPath()(geojson))
        > "M42.3132882,-71.1972416m0,4.5a4.5,4.5 0 1,1 0,-9a4.5,4.5 0 1,1 0,9z"

      :markdown

        To add a point to an SVG use the following:
      :code
        #lang: js
        var point = { type: 'Point', coordinates: [42.3132882,-71.1972416]};
        d3.select('svg').append('path').attr("d", d3.geoPath()(point));
        //or
        d3.select('svg').append('path').datum(point).attr("d", d3.geoPath());

      :markdown
        You can create either one big `path` element, or if oyu want to style or add interaction you can use multiple path elements. This is typically slower.

        #### Projection
        To really create a map we all know, you need to add a projection to the path. We will go deeper into projections later on, so bear with me.
      :code
        #lang: js
        var projection = d3.geoAlbers();

        var pathGenerator = d3.geoPath()
          .projection(projection);

      %h3 Example
      :markdown
        Combining all these elements, we can create our first map.

      %a(class="jsbin-embed" href="http://jsbin.com/hexemer/embed?js,output") D3 Selection on jsbin.com

      :markdown
        A neat feature we used here is the `projection.fitExtent([[20, 20], [600, 600]], geojson)` which will fit the map to the extent of the geojson we provide. We provide a padding `[20,20]` and the width and height of the map `[600,600]`
        > `fitExtent()`: Sets the projection’s scale and translate to fit the specified GeoJSON object in the center of the given extent. The extent is specified as an array [[x₀, y₀], [x₁, y₁]], where x₀ is the left side of the bounding box, y₀ is the top, x₁ is the right and y₁ is the bottom. Returns the projection.

        [Reference](https://github.com/d3/d3-geo#projection_fitExtent)

      %h3 Tips for the Excercises
      :markdown
        You might want to check out the SVG reference to get to know SVG a little more. You need certain attributes to change the color. [Reference](https://www.w3schools.com/graphics/svg_inhtml.asp)
        #### Where do I find good colors?
        Check out [Colorbrewer](colorbrewer2.org). An awesome tool and it can generate javascript arrays for you :)

        Or use d3 internal color tools. It will create a method which returns 10 colors. It uses a Scale internally. 

      :code
        #lang: js
        var color = d3.scaleOrdinal(d3.schemeCategory10);
        color(1);
        > #1f77b4
        color(2);
        > #ff7f0e

      :markdown
        To read more about Color in d3 take a look [here](https://github.com/d3/d3-scale#category-scales)
        And learn more about scale look no [further]()

      = partial "partials/excercises", locals: {excercises: data.excercises.geo.basic.excercises }
      = link_to "Next challenge", "/challenges/geo/projections.html", class: 'cta-btn'
