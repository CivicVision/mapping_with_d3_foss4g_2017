projection: &projection
  title: Projections
  url: projections
  excercises:
    - title: Excercise
      bin: vutuxu
      challenge: |
        Change the map to a different projection.
      solution: |
        var projection = d3.geoMercator();
        var projection = d3.geoGnomonic();
        var projection = d3.geoEquirectangular();
    - title: Excercise
      bin: vutuxu
      challenge: |
        Show a globe. With the geoOrthographic projection.
      solution: |
        var projection = d3.geoOrthographic();
    - title: Excercise
      bin: vutuxu
      challenge: |
        Rotate the globe. Tip: use setTimeout
        solution: |
          var geojson;
          var yaw = 300;
          function update() {
            projection.rotate([yaw, -45])

            u = map.selectAll('path')
            .data(geojson.features);
            u.enter()
            .append('path')
            .merge(u)
            .attr('d', geoGenerator);
            u.exit().remove()

            gr = g.selectAll('path').data([graticule()])
            gr.enter()
            .append('path')
            .merge(gr)
            .attr('d', geoGenerator);
            gr.exit().remove()
            yaw -= 0.2
          }
          d3.json('http://enjalot.github.io/wwsd/data/world/world-110m.geojson', function(err, json) {
            geojson = json;
            window.setInterval(update, 100);
          })

interaction: &interaction
  title: Interaction
  url: interactions
  excercises:
    - title: Excercise
      bin: tevivi
      challenge: |
        Highlight one area if you hover your mouse over
      solution: |
        .on('mouseover', function(d) {
          d3.select(this).attr('stroke', 'yellow')
        }).on('mouseout', function() {
          d3.select(this).attr('stroke', '')
        });
    - title: Excercise
      solution: |
        .on('mouseover', function(d) {
          d3.select('#info').html(d.properties.name);
        })

      bin: vurukik
      challenge: |
        Display information in the `info` container
    - title: Excercise
      bin: vurukik
      challenge: |
        Add a tooltip to the map, use the `#info` container.
      solution: |
        .on("mousemove", function(d) {
          d3.select("#info").style("left", (d3.event.pageX + 10) + "px")
          .style("top", (d3.event.pageY - 20) + "px")
        })
        .on("mouseover", function(d) {
          d3.select("#info").html(d).style("opacity",1)
        })
        .on("mouseout", function(d) {
          d3.select("#info").style("opacity",0)
        });
    - title: Excercise
      challenge: |
        Add Zoom to an element and zoom to extent

elements: &elements
  title: Elements on a map
  url: elements
  excercises:
    - title: Excercise
      challenge: |
        Add circles to the map with the data provided. Bonus: Use `circle` instead of `path`
      bin: noyiluj
      solution: |
        overlay.selectAll('path').data(points.features).enter().append('path').attr('d',geoGenerator)

        //Bonus Solution
        overlay.selectAll('circle').data(points.features)
        .enter()
        .append("circle")
        .attr("cx", function(d) {
          return projection(d.geometry.coordinates)[0];
        })
        .attr("cy", function(d) {
          return projection(d.geometry.coordinates)[1];
        })
        .attr("r", 5)
        .style("fill", "yellow")
        //alternative
        overlay.selectAll('g').data(points.features)
        .enter()
        .append("g")
        .attr('transform', function(d) {
          return 'translate('+projection(d.geometry.coordinates)+')';
        })
        .style("fill", "yellow")
        .append('circle').attr('r',5);
    - title: Excercise
      challenge: |
        Add a line to the map with the data provided.  
        Tip: Add a color to the line to actual see it (stroke attribute)
      solution: |
        var line = {type: 'Feature', geometry: {type: 'LineString', 
                                                coordinates: [harvard, seaport]}};
        overlay.selectAll('path').data([line]).enter().append('path').attr('d',geoGenerator).attr('stroke', 'red')
        //alternative
        overlay.append('path').datum(line).attr('d',geoGenerator).attr('stroke', 'red')
      bin: tevivi
    - title: Excercise
      challenge: |
        Fill the circles based on a value in the data.  
        _Tip: Look at the challenges in the Basic section_
      bin: satupef
      solution: |
        var colors = d3.scaleOrdinal(d3.schemeCategory10);
        overlay.selectAll('path')
        .data(points.features).enter()
        .append('path').attr('d',geoGenerator)
        .attr("fill", function(d) { return colors(d.properties.NumStudents13)});
        // alternative
        overlay.selectAll('circle').data(points.features)
        .enter()
        .append("circle")
        .attr("cx", function(d) {
          return projection(d.geometry.coordinates)[0];
        })
        .attr("cy", function(d) {
          return projection(d.geometry.coordinates)[1];
        })
        .attr("r", 5)
        .attr("fill", function(d) { return colors(d.properties.NumStudents13)});
        .style("opacity", 0.75);
    - title: Excercise
      challenge: |
        Change the size of the circles based on a value in the data  
        Tip: you might want to use `circle` instead of path  
        Read: [Scales](https://medium.com/@mbostock/introducing-d3-scale-61980c51545f)
      bin: satupef
      solution: |
        var extent = d3.extent(points.features, function(d) { return d.properties.NumStudents13;});
        var scale = d3.scaleLinear().domain(extent).range([1,10]);

        overlay.selectAll('g').data(points.features)
        .enter()
        .append("g")
        .attr('transform', function(d) {
          return 'translate('+projection(d.geometry.coordinates)+')';
        })
        .style("fill", "yellow")
        .append('circle')
        .attr('r',function(d) { return scale(d.properties.NumStudents13);})
        //alternative
        overlay.selectAll('circle').data(points.features)
        .enter()
        .append("circle")
        .attr("cx", function(d) {
          return projection(d.geometry.coordinates)[0];
        })
        .attr("cy", function(d) {
          return projection(d.geometry.coordinates)[1];
        })
        .attr('r',function(d) { return scale(d.properties.NumStudents13);})
        .style("fill", "yellow")


basic: &basic
  title: Basics
  url: basics
  reading_list:
    - title: D3 Geo API Reference
      url: https://github.com/d3/d3-geo
    - title: "Introducing d3-scale"
      url: https://medium.com/@mbostock/introducing-d3-scale-61980c51545f
    - title: "Chapter 7. Scales"
      url: http://chimera.labs.oreilly.com/books/1230000000345/ch07.html
  excercises:
    - title: Excercise
      challenge: |
        Fill the polygons with a color of your choice
      bin: hexemer
      solution: |
        var projection = d3.geoAlbers();

        var geoGenerator = d3.geoPath()
        .projection(projection);

        var map = d3.select('#map g')

        d3.json('https://gist.githubusercontent.com/milafrerichs/12fbfb500be19a41f39a581c8285ecb0/raw/a0734d28b47d48a06ca917529369cb35d232602b/residential_and_non_residential_building_.geojson', function(err, json) {
          projection
          .fitExtent([[20, 20], [600, 600]], json)
          u = map.selectAll('path')
          .data(json.features);
          u.enter()
          .append('path')
          .attr('d', geoGenerator)
          .attr('fill', '#c0c0c0');
        })
    - title: Excercise
      challenge: |
        Fill the polygons with colors based on the value of `YrBltRmd_n`
      bin: hexemer
      solution: |
        var projection = d3.geoAlbers();

        var geoGenerator = d3.geoPath()
          .projection(projection);

        var map = d3.select('#map g')
        var colors = d3.scaleOrdinal(d3.schemeCategory10);
        var c = d3.scaleOrdinal(['#fef0d9','#fdd49e','#fdbb84','#fc8d59','#e34a33','#b30000'])
        d3.json('https://gist.githubusercontent.com/milafrerichs/12fbfb500be19a41f39a581c8285ecb0/raw/a0734d28b47d48a06ca917529369cb35d232602b/residential_and_non_residential_building_.geojson', function(err, json) {
          projection
          .fitExtent([[20, 20], [600, 600]], json)
          u = map.selectAll('path')
            .data(json.features);
          u.enter()
            .append('path')
            .attr('d', geoGenerator)
            .attr('fill', function(d) {
              return c(d.properties.YrBltRmd_n);
            });
          })
    - title: Excercise
      bin: lisavow
      challenge: |
        Use topojson to create a map
      solution: |
        overlay.append('path')
        .attr('d',geoGenerator(topojson.feature(points, points.objects.SnowParking)))
        //or
        overlay.append('path').datum(topojson.feature(points, points.objects.SnowParking))
        .attr('d',geoGenerator)
        //or 
        overlay.selectAll('path').data(topojson.feature(points, points.objects.SnowParking).features)
        .enter()
        .append("path")
        .attr('d',geoGenerator)

    - title: Excercise
      bin: tahizuf
      challenge: |
        Use a csv file to create a map
      solution: |
        overlay.selectAll('path').data(points)
        .enter()
        .append("path")
        .attr('d', function(d) {
          return point({ type: "Point", coordinates: [d.X,d.Y]});
        })


structure:
  - *basic
  - *projection
  - *elements
  - *interaction
  - title: Examples
    url: examples
